{
    "contents" : "---\ntitle: \"02 - Get\"\nauthor: Jeffrey W. Hollister\nlayout: post_page\n---\n\n```{r setup, echo=FALSE, warning=FALSE}\noptions(repos=\"http://cran.rstudio.com/\")\n```\n\nThe second lesson is going to start to lay the foundation for working with data in R.  We will cover some of the very basics of R first, then move on to how you get data into R and how you work with some of the basic data structures.  Lastly, we will cover some ways to find relevant data and pull it directly into R.\n\n##Quick Links to Exercises and R code\n- [Lesson 2 R Code](/introR/rmd_posts/2015-01-14-02-Get.R): All the code from this post in an R Script.\n- [Exercise 1](#exercise-1): Introduction to the console and basic functions\n- [Exercise 2](#exercise-2): Read in data\n\n##Lesson Goals\n- Understand workflow basics\n- Learn R concepts such as assignment and operators\n- Learn some useful R functions\n- Understand the basic data structures and data types\n- Be able to read data into R from a variety of sources\n\n##More basics\nBefore we jump into details on data in R we need to introduce a few of the basics about working in the console, working via scripts, and workspaces/projects.  We will also start working with some simple, yet important R functions.\n\n###Workflow\nBeing thoughtful about workflow from the beginning of a project is something that gets overlooked a lot, but a little up-front effort can provide a big benefit.  For our purposes we are going to make use of RStudio projects and script *EVERYTHING*.  The console has its utility and we will use it plenty, especially when we are first figuring out how to use commands.  But beyond that, we will store all of our work in a script.  The basic workflow I am going to advocate is:\n\n1. Use a single project for this workshop (we created that in Lesson 1: Exercise 1).\n2. Start everything in a script and use copy/paste or the RStudio tools to send to the console.\n3. Use a new script for each lesson.\n4. Comment ruthlessly.\n5. Don't save .RData files or workspace history.  The script should recreate whatever you need.\n\nThis, of course, is not the only way you can strucutre a workflow, but I think it should be a good starting point for this workshop and one you can adapt to you own work afterwards.  And to provide a little motiviation, the more you utilize scripts, the more reproducible you work is, the more likely you will be able to recall what you did 3 months from now (your future self will thank you), and the easier it will be to transition your work from scripts to functions and, ultimately, to R packages.\n\n###Working in the Console\nAs I mentioned above, the conosle and using R interactively is very powerful.  We will do this quite a bit.  Let's spend a little time playing around in the console and learn a few new functions.\n\nR can be used as a caculator and a way to compare values.  Some examples of the basic operators:\n\n```{r operators_consoloe}\n#A really powerful calculator!\n1+1 #Add\n10-4 #Subtract\n3*2 #Multiply\n3^3 #Exponents\n100/10 #Divide\n5%%2 #Modulus\n5>2 #Greater than\n4<5 #Less than\n5<=5 #Less than or equal\n8>=2 #Greater than or equal\n2==2 #Equality: notice that it is TWO equal signs!\n```\n\nThat's neat, but so what...  \n\nWell, it could be interesting to do something with those values and save them for re-use.  We can do that with objects (everything in R is an object) and use the assignment operator, `<-`.  Know that object names cannot start with a number, contain spaces, or (most) special characters.  Underscore and periods are allowed.\n\n```{r assignment_operator}\n#Numeric assignment\nx<-5\nx\ny<-x+1\ny\nz<-x+y\nz\n#Character\na<-\"Bob\"\na\nb<-\"Sue\"\nb\n```\n\nNow that we have a little experience working in the console and creating objects with `<-`, we might want to be able to do some additional things to navigate around, look at these objects etc.\n\nSome functions that you might fund useful for working in with your R workspace:\n\n```{r useful_functions_workspace}\n#List all objects in current workspace\nls() \nls(pattern=\"a\")\n\n#Remove an object\nrm(x)\n\n#Save your workspace\n#Saves the whole thing to a file called lesson2.RData\nsave.image(\"lesson2.RData\") \n#Saves just the a and y objects to a file called lesson2_ay.RData\nsave(a,y,file=\"lesson2_ay.RData\")\n```\n\nThis is probably a good spot to bring up quotes vs no quotes around arguments in a function.  This is a very common stumbling block.  The general rule is that no quotes are used only when referring to an object that currently exists.  Quotes are used in all other cases.  For instance in `save(a,y,file=\"lesson2_ay.RData\")` the objects `a` and `y` are not quoted becuase they are objects in the workspace.  `file` is an argument of save and arguments are never quoted.  We quote the name of the file \"lesson2_ay.RData\" becuase it is not an R object but the name of a file to be created.  \n\nYou will likely still have some issues with this.  My recomendataion is to think about if it is an object in your R workspace or not.  If so, no quotes!\n\nNext thing you might want to do is navigate around your files and directories.\n\n```{r useful_functions_directory}\n#See the current directory\ngetwd()\n\n#Create a directory\ndir.create(\"temp\")\n\n#Change the directory\nsetwd(\"temp\")\n\n#List files and directories\nlist.files()\nlist.files(\"..\")\nlist.dirs(\"..\")\n```\n\n##Exercise 1\nFor this first excercise I am actually going to ignore my workflow advice from above.  We are still in explore mode and saving this as a script doesn't yet make a whole lot of sense. Remember to use the green stickies when you have completed, and red stickies if you are running into problems. So, for this exercise:\n\n1. Create two objects named `number1` and `number2` and give them the values of 25 and 4, respectively \n2. Create two more objects named `string1` and `string2`, give them any character string that you would like. \n3. Now using `number1`,`number2`, and the power of math create an object called `number3` that equals 100.\n4. Create two more objects whose value is of your choosing\n5. List the objects in your workspace\n6. Remove `string2`\n6. List your working directory\n7. List the files in your working directory\n8. Make sure your working directory is \"gedr_workshop\", if not use `setwd()` to get there.\n9. Create a new directory called \"R\"\n10. Try to add `string1` and `number1`.  What happens?  \n\nSo the last question in exercise 1 was a bit of a contrived way to segue into data types and structures.  So with that last bit, what did we ask R to do?  Why did it respond the way it did?  \n\nIn short it has a lot to do with data types.  Let's learn some more\n\n##Data types and data structures in R\n*Borrowed liberally from Jenny Bryan's [course materials on r](http://www.stat.ubc.ca/~jenny/STAT545A/quick-index.html) and Karthik Ram's [material from the Canberra Software Carpentry R Bootcamp](https://github.com/swcarpentry/2013-10-09-canberra).  Anything good is because of Jenny and Karthik.  Mistakes are all mine.*\n\nRemember that everything in R is an object.  With regards to data, those objects have some specific characteristics that help R (and us) know what kind of data we are dealing with and what kind of operations can be done on that data.  This stuff may be a bit dry, but a basic understanding will help as so much of what we do with analysis has to do with the organization and type of data we have. First, lets discuss the atomic data types.\n\n###Data Types\nThere are 6 basic atomic classes: character, numeric (real or decimal), integer, logical, complex, and raw.\n\n| Example \t\t\t\t | Type \t\t |\n| :--------------- | --------: |\n| \"a\", \"swc\" \t\t\t | character |\n| 2, 15.5 \t\t\t\t | numeric \t | \n| 2L \t\t\t\t\t\t\t | integer \t |\n| `TRUE`, `FALSE`  | logical \t |\n| 1+4i \t\t\t\t\t\t | complex \t |\n| 62 6f 62         | raw\t\t\t |\n\nIn this workshop we will deal almost exclusively with three (and these are, in my experience, by far the most common): character, numeric, and logical.  There are also some useful commands to explore these data types and get some basic information about them.\n\n``` {r data_type_functions, eval=FALSE}\ntypeof()  # what is it?\nlength()  # how long is it? What about two dimensional objects?\nattributes()  # does it have any metadata?\n```\n\n### NA, Inf, and NaN\nThere are values that you will run across on ocassion that aren't really data types but are important to know about.  \n\n`NA` is R's value for missing data.  You will see this often.\n\n`Inf` is infinity. You can have positive or negative infinity.\n\n```{r}\n1/0\n# [1] Inf\n1/Inf\n# [1] 0\n```\n\n`NaN` means Not a number. it's an undefined value.\n\n```{r}\n0/0\nNaN.\n```\n\n###Data Structures\nThe next set of information relates to the many data strucutres in R.  \n\nThe data structures in base R include:\n\n- vector\n- list\n- matrix\n- data frame\n- factors\n- tables\n\nOur efforts will focus on vectors and data frames.  We will discuss just the basics of lists and factors.  I will leave it to your curiousity to explore the matrix and table data structures\n\n### Vectors\nA vector is the most common and basic data structure in `R` and is pretty much the workhorse of R. \n\nA vector can be a vector of characters, logical, integers or numeric and all values in the vector must be of the same data type.  Specifically, these are known as atomic vectors.\n\nThere are many ways to create vectors, but we will focus on one, `c()`, which is a very common way to create a vector from a set of values.  `c()` combines a set of arguments into a single vector.  For instance,\n\n```{r use_c}\nchar_vector <- c(\"Joe\",\"Bob\",\"Sue\")\nnum_vector <- c(1,6,99,-2)\nlogical_vector <- c(TRUE,FALSE,FALSE,TRUE,T,F)\n```\n\nNow that we have these we can use some functions to examine the vectors. \n\n```{r examine_vector}\n#Print the vector\nprint(char_vector)\nchar_vector\n\n#Examine the vector\ntypeof(char_vector)\nlength(logical_vector)\nclass(num_vector)\nstr(char_vector)\n```\n\nWe can also add to existing vectors using `c()`.\n\n```{r add_to_vec}\nchar_vector <- c(char_vector, \"Jeff\")\nchar_vector\n```\n\nLastly, there are some ways to speed up entry of values.\n\n```{r vector_shortcuts}\n#Create a series\nseries <- 1:10\nseq(10)\nseq(1, 10, by = 0.1)\n\n#Repeat values\nfives<-rep(5,10)\nfives\nlaugh<-rep(\"Ha\", 100)\nlaugh\n```\n\n### Data frames\n\nData frames are the data structure you will most often use when doing data analysis.  They are the most spreadsheet like data structure in R, but unlike spreadsheets there are some rules that must be followed. This is a good thing!\n\nData frames are made up of columns and rows.  Each column is a vector and those vectors must be of the same length.  Essentially, anything that can be saved in a `.csv` file can be read in as a data frame.  Data frames have several attributes.  The ones you will interact with the most are column names, row names, dimension.  \n\nSo one way to create a data frame is from some vectors and the `data.frame()` command:\n\n```{r create_data_frame}\nnumbers <- 1:26\nletters <- letters #this is a special object available from base R\nlogical <- c(rep(TRUE,13),rep(FALSE,13))\nexamp_df <- data.frame(numbers,letters,logical)\n```\n\nNow that we have this data frame we probably want to do something with it.  We can examine it in many ways.\n\n```{r examine_data_frame}\n#See the first 6 rows\nhead(examp_df)\n#See the last 6 rows\ntail(examp_df)\n#See column names\nnames(examp_df)\n#see row names\nrownames(examp_df)\n#Show structure of full data frame\nstr(examp_df)\n#Show number of rows and colums\ndim(examp_df)\nnrow(examp_df)\nncol(examp_df)\n#Get summary info\nsummary(examp_df)\n```\n\n### Factors and Lists\n\nFactors are special vectors that represent categorical data. Factors can be ordered or unordered and are often important with modelling functions such as `lm()` and `glm()` (think dummy variables) and also in plot methods.\n\nFactors are pretty much integers that have labels on them.  While factors look (and often behave) like character vectors, they are actually integers under the hood, and you need to be careful when treating them like strings. Some string methods will coerce factors to strings, while others will throw an error.\n\nFactors may be ordered (e.g., low, medium, high) or unordered (e.g. male, female).\n\nFactors can be created with `factor()`. Input is a character vector.\n\n```{r factor_examples}\n#An unorderd factor\nyn <- factor(c(\"yes\", \"no\", \"no\", \"yes\", \"yes\"))\nyn\n\n#An ordered factor\nlmh <- factor (c(\"high\",\"high\",\"low\",\"medium\",\"low\",\"medium\",\"high\"),levels=c(\"low\",\"medium\",\"high\"),ordered=TRUE )\n```\n\n### List\n\nLists are actually a special type of vector, but it is probably best to think of them as their own thing.  Lists can contain multiple items, of mulitple types, and of multiple structures.  They are very versatile and often used inside functions or as an output of functions.  \n\nAlso, lists don't print out like a vector. They print a new line for each element.\n\nLists are made simply with the `list()` function.\n\n```{r list_examples}\nexamp_list<-list(letters=c(\"x\",\"y\",\"z\"),animals=c(\"cat\",\"dog\",\"bird\",\"fish\"),numbers=1:100,df=examp_df)\nexamp_list\n```\n\nIf you want to learn more about lists or any other data structure, [Hadley Wickham's Advanced R section on data structures](http://adv-r.had.co.nz/Data-structures.html) is good.\n\n##Reading data into R\nAll of the examples so far have relied on entering data directly into the console or a script.  That mode is certainly useful for demonstrating data structures, but would be a nightmare if you were dealing with a real dataset.  What we generally want to do is read in data from a file or from a database that resides on your local machine or on the web.  There are a gazillion ways that this can be accomplished, right now, we are going to work with one, `read.csv()`.  If there is time later, we may talk about some others.\n\n`read.csv()` is a specialized version of `read.table()` that focuses on, big surprise here, `.csv` files.  This command assumes a header row with column names and that the delimiter is a comma.  The expected  \nno data value is `NA` and by default, strings are converted to factors (this can trip people up).\n\nSource files for `read.csv()` can either be on a local hard drive or, and this is pretty cool, on the web.  We will be using the later for our examples and exercises.  If you had a local file it would be accessed like `mydf <- read.csv(\"C:/path/to/local/file.csv\")`.  As an aside, paths and use of forward vs back slash is important. R is looking for forward slashes (\"/\"), or unix-like paths.  You can use these in place of the back slash and be fine.  You can use a back slash but it needs to be a double back slash (\"\\\\\").  This is becuase the single backslash in an escape character that is used to indicate things like newlines or tabs. Doesn't really matter which one you use, I would just select one and be consistent.\n\nFor now we are going to be focusing on grabbing data from a website, which just requires using an URL in the `read.csv()` function.\n\nLet's give it a try.  \n\n```{r read_csv_examp}\n#Grab data from the web\nweb_df <- read.csv(\"http://jwhollister.com/public/files/example.csv\")\nhead(web_df)\nstr(web_df)\ndim(web_df)\nsummary(web_df)\n```\n\nIt is possible to pull data in directly from an Excel file as well.  These require external packages and also external libraries.  The one that should work with the installs on the EZ Tech machines is `gdata`.  We won't be working with this extensively in the workshop, but I will show an example here.\n\n```{r gdata_examp}\n#Make sure gdata is installed\ninstall.packages(\"gdata\")\n#Load up gdata\nlibrary(\"gdata\")\n#Get an example Excel file read into R\ndownload.file(\"http://jwhollister.com/public/files/example.xlsx\", \"example.xlsx\")\nfirst_sheet<-read.xls(\"example.xlsx\",sheet=1)\nsecond_sheet<-read.xls(\"example.xlsx\",sheet=2)\n#Did it work?\nfirst_sheet\nsecond_sheet\n```\n\nSo now we have a basic feel on how to work in R, how data is dealt with, and how to pull data from a file into R.  Next we are going to practice some of these skills.\n\n##Exercise 2\nFrom here on out I hope to have these exercises begin to build on each other. We may not do that 100%, but there should at least be a modicum of continuity. For this exercise we are going to grab some data, look at that data, and be able to describe some basic information about that dataset.  The data we are using is the 2007 National Lakes Assessment.\n\n1. Create a new script in RStudio.  Name it \"nla_analysis.R\"\n2. As you write the script comment as you go.\n3. Add commands to your script that creates two data frames: One named `nla_wq` that contains all of the data located at http://water.epa.gov/type/lakes/assessmonitor/lakessurvey/upload/NLA2007_WaterQuality_20091123.csv and another names `nla_sites` from http://water.epa.gov/type/lakes/assessmonitor/lakessurvey/upload/NLA2007_SampledLakeInformation_20091113.csv.\n4. Add commands to your script that will provides details on the structure (hint: `str`) of each newly created data frame\n5. Run the script and make sure it doesn't throw any errors and you do in fact get the two data frames.\n6. If you still have some time, explore the data frames using some of the commands we covered.  This part does not need to be included in the script.\n\n\n",
    "created" : 1419013542503.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2424702202",
    "id" : "1CCBC531",
    "lastKnownWriteTime" : 1419013560,
    "path" : "~/projects/introR/rmd_posts/2015-01-14-02-Get.Rmd",
    "project_path" : "rmd_posts/2015-01-14-02-Get.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}